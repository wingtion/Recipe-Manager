import com.formdev.flatlaf.themes.FlatMacLightLaf;

import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

public class RecipeScreen extends javax.swing.JDialog {
    DefaultTableModel model;
    RecipeDAO operations =  new RecipeDAO();


    /**
     * Creates new form RecipeScreen
     */
    public RecipeScreen(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        model = (DefaultTableModel) recipe_table.getModel();
        displayRecipe();
        setResizable(false);
        setTitle("Recipe Manager");

        setIconImage(new ImageIcon(getClass().getResource("cook-book.png")).getImage());

        recipe_table.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    int selectedRow = recipe_table.getSelectedRow();
                    if (selectedRow != -1) {
                        openRecipeDetailsWindow(selectedRow);
                    }
                }
            }
        });
    }
    private void openRecipeDetailsWindow(int selectedRow) {
        int originalRowIndex;

        // if table is filtered
        if (recipe_table.getRowSorter() != null) {
            originalRowIndex = recipe_table.convertRowIndexToModel(selectedRow);
        } else {
            // Filtrelenmi≈ü tablo yoksa, orijinal tabloyu kullan
            originalRowIndex = selectedRow;
        }

        int recipeId = (int) model.getValueAt(originalRowIndex, 0);
        String recipeName = model.getValueAt(originalRowIndex, 1).toString();
        String ingredients = operations.getDetailedIngredients(recipeId);
        String instructions = operations.getDetailedInstructions(recipeId);
        String category = model.getValueAt(originalRowIndex, 4).toString();

        new RecipeDetailsDialog((Frame) this.getParent(), "Recipe Details", true, recipeName, ingredients, instructions, category);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        recipe_table = new javax.swing.JTable();
        search_bar = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        name_area = new javax.swing.JTextField();
        ingredients_area = new javax.swing.JTextField();
        instructions_area = new javax.swing.JTextField();
        category_area = new javax.swing.JTextField();
        mesage_text = new javax.swing.JLabel();
        recipeadd = new javax.swing.JButton();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);


        recipe_table.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                        "ID", "Name", "Ingredients", "Instructions", "Category"
                }
        ) {
            boolean[] canEdit = new boolean [] {
                    false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        recipe_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                recipe_tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(recipe_table);
        if (recipe_table.getColumnModel().getColumnCount() > 0) {
            recipe_table.getColumnModel().getColumn(0).setResizable(false);
            recipe_table.getColumnModel().getColumn(1).setResizable(false);
            recipe_table.getColumnModel().getColumn(2).setResizable(false);
            recipe_table.getColumnModel().getColumn(3).setResizable(false);
        }

        search_bar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                search_barKeyReleased(evt);
            }
        });

        jLabel1.setText("Name:");

        jLabel2.setText("Ingredients:");

        jLabel3.setText("Instructions:");

        jLabel4.setText("Category:");

        mesage_text.setForeground(new java.awt.Color(134, 6, 6));

        recipeadd.setText("Add New Recipe");
        recipeadd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recipeAddActionPerformed(evt);
            }
        });

        update.setText("Update Recipe");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        delete.setText("Delete Recipe");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });


        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(24, 24, 24)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)
                                                        .addComponent(search_bar)
                                                        .addComponent(jSeparator1)))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(30, 30, 30)
                                                .addComponent(mesage_text, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(35, 35, 35)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabel2)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(ingredients_area))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabel1)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(name_area, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabel3)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(instructions_area))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabel4)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(category_area)))
                                                .addGap(45, 45, 45)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(recipeadd, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                                                        .addComponent(update, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(search_bar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(name_area, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(recipeadd))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(ingredients_area, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(update))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(instructions_area, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(delete))
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel4)
                                        .addComponent(category_area, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(mesage_text)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void dynamicSearch(String search){

        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);

        recipe_table.setRowSorter(tr);

        tr.setRowFilter(RowFilter.regexFilter(search));

    }
    private void search_barKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search_barKeyReleased
        String search = search_bar.getText();

        dynamicSearch(search);

    }//GEN-LAST:event_search_barKeyReleased
    private void recipeAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRecipeActionPerformed
        mesage_text.setText("");

        String name = name_area.getText();
        String ingredients = ingredients_area.getText();
        String instructions = instructions_area.getText();
        String category = category_area.getText();

        // Add new recipe
        operations.addRecipes(name, ingredients, instructions, category);

        // Display recipes in the table
        displayRecipe();

        mesage_text.setText("New Recipe successfully added...");

        // Reset input fields
        clearInputFields();

    }
    private void recipe_tableMouseClicked(java.awt.event.MouseEvent evt){

        int selectedRow = recipe_table.getSelectedRow();

        // if table is filtered
        if (recipe_table.getRowSorter() != null) {
            int originalRowIndex = recipe_table.convertRowIndexToModel(selectedRow);

            int originalIndexInOriginalTable = originalRowIndex;

            String recipeName = model.getValueAt(originalIndexInOriginalTable, 1).toString();
            name_area.setText(recipeName);
            String ingredients = model.getValueAt(originalIndexInOriginalTable, 2).toString();
            ingredients_area.setText(ingredients);
            String instructions = model.getValueAt(originalIndexInOriginalTable, 3).toString();
            instructions_area.setText(instructions);
            String category = model.getValueAt(originalIndexInOriginalTable, 4).toString();
            category_area.setText(category);

        } else {
            // if it's not filtered then you can choose selected rows data
            String recipeName = model.getValueAt(selectedRow, 1).toString();
            name_area.setText(recipeName);
            String ingredients = model.getValueAt(selectedRow, 2).toString();
            ingredients_area.setText(ingredients);
            String instructions = model.getValueAt(selectedRow, 3).toString();
            instructions_area.setText(instructions);
            String category = model.getValueAt(selectedRow, 4).toString();
            category_area.setText(category);

        }
    }
    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed

        String name = name_area.getText();
        String ingredients = ingredients_area.getText();
        String instructions = instructions_area.getText();
        String category = category_area.getText();

        int selectedRow = recipe_table.getSelectedRow();

        if (selectedRow == -1) {
            mesage_text.setText("Please choose a Recipe to update!");
        } else {
            int originalRowIndex;
            if (recipe_table.getRowSorter() == null) {
                originalRowIndex = selectedRow;
            } else {
                originalRowIndex = recipe_table.convertRowIndexToModel(selectedRow);
            }

            int id = (int) model.getValueAt(originalRowIndex, 0);

            // Update the recipe
            operations.updateRecipe(id, name, ingredients, instructions, category);

            // Display recipes in the table
            displayRecipe();

            mesage_text.setText("Recipe is successfully updated...");

            // Reset input fields
            clearInputFields();
            clearInputFields();
        }

    }
    private void clearInputFields() {
        name_area.setText("");
        ingredients_area.setText("");
        instructions_area.setText("");
        category_area.setText("");
    }
    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_silActionPerformed
        mesage_text.setText("");

        int selectedRow = recipe_table.getSelectedRow();

        if (selectedRow == -1) {
            if (model.getRowCount() == 0) {
                mesage_text.setText("Recipe table is empty right now.");
            } else {
                mesage_text.setText("Please select a recipe to delete.");
            }
        } else {
            int id;

            if (recipe_table.getRowSorter() != null) {
                int originalRowIndex = recipe_table.convertRowIndexToModel(selectedRow);
                id = (int) model.getValueAt(originalRowIndex, 0);
            } else {
                id = (int) model.getValueAt(selectedRow, 0);
            }

            // Delete the recipe
            operations.deleteRecipes(id);

            // Display recipes in the table
            displayRecipe();

            mesage_text.setText("Recipe successfully deleted.");

            // Reset input fields
            clearInputFields();
        }

    }
    public void displayRecipe() {

        model.setRowCount(0);

        ArrayList<Recipe> recipes = new ArrayList<>();

        recipes = operations.bringRecipes();

        if (recipes != null ) {

            for (Recipe recipe : recipes) {
                Object[] willBeAdded = {recipe.getId(), recipe.getName(), recipe.getIngredients(), recipe.getInstructions(), recipe.getCategory()};

                model.addRow(willBeAdded);
            }
        }
    }
    public static void main(String args[]) {



        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                RecipeScreen dialog = new RecipeScreen(new javax.swing.JFrame(), true);


                // Set the X-coordinate to be left-aligned but centered on the screen
                int screenWidth = Toolkit.getDefaultToolkit().getScreenSize().width;
                int dialogWidth = dialog.getWidth();
                int xCoordinate = (screenWidth - dialogWidth) / 2;

                dialog.setLocation(xCoordinate, 0); // Centered but left-aligned
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField name_area;
    private javax.swing.JTextField search_bar;
    private javax.swing.JTable recipe_table;
    private javax.swing.JButton recipeadd;
    private javax.swing.JTextField instructions_area;
    private javax.swing.JButton update;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField category_area;
    private javax.swing.JLabel mesage_text;
    private javax.swing.JButton delete;
    private javax.swing.JTextField ingredients_area;
    // End of variables declaration//GEN-END:variables
}
